class NoTP
{
	public constructor()
	{
	
	}
	public constructor(Int arg1, String arg2)
	{
	
	}
	public static fun StaticTest1(Int arg1, String arg2) : Void{
	
	}
	public static fun StaticTest2<T>(T arg1, Int arg2) : Void{
	
	}
	public static fun StaticTest3<T,X>(X arg1, T arg2) : Void{
	
	}
	public fun InstanceTest1() : Void{
	
	}
}
class OneTP<T>
{
	public constructor()
	{
	
	}
	public constructor(T arg1, String arg2)
	{
	
	}
	public static fun StaticTest1(T arg1, String arg2) : Void{
	
	}
	public static fun StaticTest2<X>(T arg1, X arg2) : Void{
	
	}
	public static fun StaticTest3<X>(X arg1, Int arg2) : Void{
	
	}
	public fun InstanceTest1() : Void{
	
	}
	public fun InstanceTest2(T arg1) : T{
		return arg1;
	}
}
class TwoTP<T,S>
{
	public constructor()
	{
	
	}
	public constructor(T arg1, String arg2, S arg3)
	{
	
	}
	public fun InstanceTest1(S arg1, T arg2) : Int{
		return 4;
	}
}



class Main
{
	public static fun test1<T>(){
		OneTP<T> t = new OneTP<T>();
	}
	public static fun Main() : Void
	{
		new NoTP();
		new OneTP<Int>();
		new TwoTP<Int,Int>();
	}
}
